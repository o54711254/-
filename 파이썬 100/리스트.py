# 파이썬의 대표적인 자료구조인 컬렉션 자료형 4가지를 공부할 때 공부 가이드를 제시해보시오

# [1] : 리스트 - list
# [2] : 튜플 - tuple
# [3] : 집합 - set
# [4] : 딕셔너리(사전) - dict


# 리스트에 대한 설명으로 잘못된 것은 무엇인지 말해보시오.

# [!] : 리스트 ---> list
# 1. 리스트는 데이터값을 담는 바구니다. 또는 동전을 담는 동전지갑이다.
# 2. 리스트는 파이썬 내부에서는 하나의 타입이다.
# 3. type() 함수로 리스트의 타입을 출력해보면 list 라고 나온다.
# 4. 리스트의 요소로는 [10, 3.14, 'a', 'korea'] 등과 같이 정수형, 실수형, 문자형을 하나의 리스트에 담을 수 있다.
# 5. 보통 배열은 같은 타입의 데이터 값을 담는 편이나 파이썬의 리스트는 다른 자료형을 담을 수 있다.
# 6. 그러나 리스트 안에 또 다른 리스트를 요소로써 가질 수는 없다. (X) --> 가질 수 있음
# 7. 중복된 값을 가질 수 없다. (X) --> 가질 수 있음, 집합이 중복된 값을 가질 수 없음
# 8. 빈 리스트를 생성하는 방식은 a=[] 방식과 b=list() 방식중 어느것을 사용해도 무방하다.


# 정수형, 실수형, 문자형 리스트를 생성하는 예제를 만들어보시오.

# [1]
a = [1,2,3,4,5]
print('[1] 정수형 리스트 :', a, type(a))
# [2]
b = [1.0,2.0,3.0,4.0,5.0]
print('[2] 실수형 리스트 :', b, type(b))
# [3]
c = ['a', 'b', 'c', 'd', 'e']
print('[3] 문자형 리스트 :', c, type(c))

print('-'*100)

# 파이썬 리스트 생성 시 서로 다른 데이터 자료형 값을 사용하여 만들어보시오.

# [1] : 정수 + 리스트
a = [1, 2, 3, 4, 5, ['a','b','c']]
print('[1] 정수 + 리스트 : ', a, type(a))

# [2] : 정수 + 실수 + 문자
b = [100, 3.14, 'korea', [1, 2, 3]]
print('[2] 정수 + 실수 + 문자 : ', b, type(b))

# [3] : 정수 + 리스트 + 튜플
c = [1, 2, 3, [1, 2, 3], (1, 2, 3)]
print('[3] 정수 + 리스트 + 튜플 : ', c, type(c))

# [4] : 주요타입 7개 모두 ---> 정수, 실수, 문자, 리스트(list), 튜플(tuple), 집합(set), 딕셔너리(dict)
d = [100, 3.14, 'korea', [1,2,3,3], (1,2,3,3), {1,2,3,3}, {'a':100, 'b':200, 'c':300}]
print('[4] 주요타입 7개 모두 : ', d, type(d))


print('-'*100)


# 파이썬 리스트 생성 시 빈 리스트를 생성하는 코드를 2가지로 구현하시오.

# [1]
a = []
print(a, type(a))

# [2]
b = list()
print(b, type(b))

print('-'*100)


# 인데기스를 이용하여 리스트 요소에 접근하고 해당 요소 값을 출력해보시오.
# 이 문제는 다양한 리스트 요소에 접근하고 해당 요소 값을 출력하는 것에 대해서 아는지를 묻는 문제이다.


# [1] : 리스트 요소에 접근 --> 인덱스(index)-->색인
# 리스트의 각 요소에는 인덱스 번호가 붙여지므로 그 인덱스 번호를 사용해서 접근하고 출력시에도 사용.
# 인덱스 번호는 0부터 부여 --> 첫번째 요소의 인덱스 번호는 0
a = [100, 200, 300, 400, 500]
print('[1] 인덱스를 이용한 a리스트의 요소 값 출력:', a[3])

# [2] : 아래의 b 리스트에서 b[1], b[3], b[5], b[6]을 출력했을때 어떤값이 출력되는지
b = [100, 3.14, 'korea', [1,2,3,3], (1,2,3,3), {1,2,3,3}, {'a':100, 'b':200, 'c':300}]
print(b[1], b[3], b[5], b[6])
print(len(b))


print('-'*100)

# 아래의 리스트에서 korea, 365, 400 이라는 값이 출력되도록 작성하시오.
# 이 문제는 리스트내 리스트 또는 튜플 요소에 인덱스로 접근한느 방법을 아는지를 묻는 문제이다.

a = [100, 3.14,'korea', [1,2,3,365], (100,200,300,400,500)]
print(a[2])
print(a[3][3])
print(a[4][3])

print('-'*100)

# 역인덱스를 사용하여 리스트 요소의 마지막 부터 거꾸로 출력되도록 구현하시오.
# 출력결과는 500 400 300 200 100 순으로 출력이 되어야 한다.
# 이 문제는 역인덱스에 대해서 알고 있는지를 묻는 문제이다.

a = [100, 200, 300, 400, 500]

# [1]
print('인덱스를 이용한 출력 : ', a[:])

# [2]
print('역인덱스를 이용한 출력 : ', a[::-1])


print('-'*100)

# 인덱스와 반복문을 사용하여 리스트 요소의 값들을 모두 출력하시오.

# [1] : 인덱스 + 반복문
a = [100, 200, 300, 400, 500, [1,2,3], (4,5,6)]

# [2] : 반복문을 사용해서 출력
for i in range(len(a)):
    print(a[i], end='   ')

print()

print('-'*100)

# 학생들의 영어 점수를 오름차순으로 출력하는 코드를 구현하시오.
# 영어 점수는 리스트로 구성한다.
# 내림차순도 구현해본다.

eng_score = [100, 40, 70, 90, 60]
eng_score.sort()                # 정렬--> sort(), sorted() 함수 사용
# eng_score.sort(reverse=True)  # 반대로

for i in range(len(eng_score)):
    print(eng_score[i], end=' ')

print()

# 역인덱스를 사용하여 영어 점수를 오름차순과 내림차순으로 출력시키시오

eng_score = [100, 40, 70, 90, 60]
eng_score.sort(reverse=True)
for i in range(-5, 0):
    print(eng_score[i], '(',i,')', end=' ')
print()

print('-'*100)

# 학생들의 영어 점수 리스트에 새 전학생의 영어 점수를 추가해보시오.
# 추가외에도 수정, 삭제도 모두 구현한다.
# 이 문제는 기존 리스트 또는 빈리스트에 새로운 요소를 추가, 수정, 삭제하는 방법을 아는지 묻는 문제이다.

eng_score = [90, 60, 75, 100, 88]

# [1] : 원본
print(eng_score)

# [2] : 추가 -> append() 사용
eng_score.append(99)
print(eng_score)

# [3] : 수정(변경) -> index 사용
eng_score[-1] = 37
print(eng_score)

# [4] : 삭제 -> del 사용 + index 사용
del eng_score[-1]
print(eng_score)

print('-'*100)

# 2개의 리스트를 하나의 리스트로 묶는 병합 처리에 대한 코드를 구현하시오.

# [1]
a = [0, 1, 2, 3, 4]
b = [5, 6, 7, 8, 9]
print(a+b)

print(a+a+a)
print(a*3)


print('-'*100)

# 동물원에서 원하는 동물의 케이지(cage)를 찾아서 출력하는 코드를 구현하시오
# 아래는 동물원 리스트이며 괄호안의 숫자는 해당 동물의 케이지 번호이다.
# 코끼리(0), 하마(1), 사자(2), 호랑이(3), 악어(4)
# 이때, 동물 이름은 사용자 입력으로 처리한다. --> 예) 동물 이름을 입력하세요 =
# 이 문제는 리스트에서 원하는 특정 요소를 검색할 수 있는지를 묻는 문제이다.

# animals = ['elephant', 'hippo', 'lion', 'tiger', 'alligator']

# ani_name = input("동물 이름을 입력하세요 ")
# ani_index = animals.index(ani_name)
# print(f'{ani_name} 동물의 케이지는 {ani_index}번 위치에 있습니다. {ani_index}번 케이지 약도를 출력하시겠습니까?')

# print('-'*100)

# 리스트에 들어있는 동물중 중복된 동물을 제거하여 출력하시오.

# [1] : 리스트 -> 집합 -> 중복제거
lst = ['dog', 'hippo', 'elephant', 'lion', 'tiger', 'alligator', 'hippo', 'lion']
lst2 = list(set(lst))       # 중복 제거 후 다시 리스트로
print(lst2, type(lst2))

print('-'*100)

# 아래의 자료구조에 접근시 에러가 나는 것은 무엇이고 그 이유를 설명해보시오.
# 이 문제는 리스트 타입과 집합 타입의 차이점을 이해하고 있는지를 묻는 문제이다. 

# [1]: 리스트
a = ['dog', 'hippo', 'elephant', 'lion', 'tiger', 'alligator', 'hippo', 'lion']
print('[1] lion 출력하기 :', a[3]) 

# [2] : 집합
# b = set(a)
# print('[2] lion 출력하기 : ', b[3]) --> 집합타입은 인덱스를 사용할 수 없음

print('-'*100)

# 리스트 컴프리헨션(list comprehension)이란 무엇인지 예제를 통해 설명해보시오.
# 파이썬에서 굉장히 많이 사용되는 list comprehension 사용법과 개념에 대해서 알고 있는지를 묻는 문제이다.
# 파이썬 외에도 판다스, 넘파이 등 데이터 분석 분야에서도 굉장히 많이 사용되는 문법이므로 중요하다.
# 추가로.. 람다식과 같이 사용하는 방법도 알고 있어야 한다.

# [!] : comprehension
# 보다 더 쉽게 만들어 쓰는 것(list, set, dict...)

# [1] : 수동 리스트 생성 --> 1~10까지의 요소를 갖는 리스트 생성
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print('[1] 수동으로 리스트 생성 -->', a, type(a))

# [2] : for 반복문
for i in range(1,11):
    print(i, end='')
print()

# [3] : for 반복문 -->빈 리스트 --> append
b = []
for i in range(1,11):
    b.append(i)

print()

print(b, type(b))

# [4] : list comprehension
c = [i for i in range(1,11)]
print(c,type(c))

print('-'*100)

# 아래의 다양한 list comprehension 문제들을 코드로 구현하시오.
# [1] list comprehension 괄호([])를 사용하지 않고 list() 와 for 문으로 1~10까지의 리스트를 만들어보시오.
# [2] 1~10까지의 수를 list comprehension으로 각 숫자를 제곱한 값을 저장하는 리스트를 만들어보시오.
# [3] 위 2번 문제에서 5의 제곱 값은 제외하고 출력시키시오. (★★★)
# [4] if 조건문을 사용하여 1~50까지의 수에서 짝수, 홀수만 저장하는 리스트를 각각 만들어보시오.

# [1]
a = list(i for i in range(1, 11))
print(a, type(a))

# [2]
b = [i * i for i in range(1, 11)]
print(b)

b = [i ** 2 for i in range(1, 11)]
print(b)

# [3] --> if 조건문
c = [i * i for i in range(1, 11) if i != 5]
print(c)

# [4]
d = [i for i in range(1,51) if i % 2 == 1]
print(d)

d = [i for i in range(1,51) if i % 2 == 0]
print(d)

d = [i * 2 for i in range(1, 26)]
print(d)

e = [i * 2-1 for i in range(1, 26)]
print(e)

print('-'*100)

# a = [ i, j for i in range(3) for j in range(3)] <-- 왼쪽의 list comprehension 결과를 말해보시오. (★★★)
# 이 문제는 중첩된 이중 for문에 대한 사용법과 진행 순서를 아는지를 묻는 문제이다.

# [1] : 중첨 for 반복문 --> 구구단
a = [ (i, j) for i in range(2,4) for j in range(1,4)]
print(a)